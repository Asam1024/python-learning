# -*- coding: utf-8 -*-
"""
@Time ： 2020/3/25 22:17
"""

# ### 函数的嵌套
"""
函数之间允许嵌套:
	嵌套在外层的就是外函数
	嵌套在内容的就是内函数
"""
def outer():

	def inner():
		print('111')
	inner()

outer
'''
1.内部函数可以直接在函数外部调用吗？ no
2.调用外部函数后，内部函数可以在函数外部调用吗   no
3.内部函数可以在函数内部调用吗    yes
4.内部函数在函数内部调用时，是否有先后顺序  先定义再调用
python  没有预加载机制，不能提前把函数加载到内在当中
'''
"""
	def func():
		pass
	func()

	int a = 5 c
	int a = 6 java
	$a = 67 php
	var a = 89 js
	a = 90 python
"""


#外层函数 outer函数  里面有Inner  inner中还有smaller 如何调用smaller?
def outer():

	def inner():

		def smaller():
			print(id)
			print('我是smaller函数')
		smaller()
	inner()

outer()

#LEGB原则  就近找变量原则
"""
#找寻变量的调用顺序采用LEGB原则(即就近原则)
B —— Builtin(Python)；Python内置模块的命名空间      (内建作用域)
G —— Global(module)； 函数外部所在的命名空间        (全局作用域)
E —— Enclosing function locals；外部嵌套函数的作用域(嵌套作用域)
L —— Local(function)；当前函数内的作用域            (局部作用域)
依据就近原则,从下往上 从里向外 依次寻找
"""

#生命周期
"""
内置命名空间中的所有变量 > 全局命名空间中的所有变量 > 局部命名空间中的所有变量
"""
# 了解
"""
# 命名空间 : 划分一块区域保存所有数据,以字典的方式存储(变量与值形成映射关系).一共三种.
(1)内建命名空间:解释器启动时创建,直到解释器运行结束,生存周期最长
(2)全局命名空间:文件运行时创建,直到解释器运行结束,生存周期较长
(3)局部命名空间:函数调用时,里面的局部变量才创建,调用结束后即释放,生存周期较短
#命名空间的提出是为了划分和控制变量是否可见,以及生存周期的长短.

#命名空间 创建顺序:(了解)
	python解释器启动->创建内建命名空间->创建全局命名空间->创建局部命名空间
#命名空间 销毁顺序:(了解)
	函数调用结束后->销毁函数对应的局部命名空间数据->销毁全局命名空间数据->销毁内建命名空间数据
"""

"""
# 地址相关知识点:
	-5~正无穷 int
	浮点型非负数 float
	相同的布尔值  bool
	在实数+虚数结构中永远不相同(只有虚数部分除外) complex
	相同的字符串 str
	空元组 tuple
	id() 用来获取地址
	is  / is not 针对于地址提出来,用来判断两个变量地址是否相同.

	var1 = 90
	var2 = 90
	print(id(var1))
	print(id(var2))
"""





















