# -*- coding: utf-8 -*-
"""
@Time ： 2020/3/8 15:12
@Auth ： Sam
@File ：10.while 循环.py
@IDE ：PyCharm
"""
# ### 循环结构
"""
特点:可以提升代码执行的效率,减少冗余代码
语法:
while 条件表达式:
	code1...
	code2....
如果条件表达式成立,那就返回True,执行代码块里面的内容
如果条件表达式成立,那就返回False,终止循环.
"""
# 打印1~100;
"""
# (1) 初始化一个变量i
i = 1
# (2) 写一个循环的条件
while i<=100:
	# (3) 写一个自增自减的值
	i+=1
"""
'''
i = 1
while i <=100:
	print(i)
	i+=1
'''
"""
代码解析:
先初始化变量i等于1
判断1 <= 100 条件为真,返回True,执行循环中的代码块
直接print(1)
让i 自增加1 变成结果2
第一次循环结束 ,回到22 循环判断的条件中

判断2 <= 100 条件为真,返回True,执行循环中的代码块
直接print(2)
让i 自增加1 变成结果3
第二次循环结束 ,回到22 循环判断的条件中

判断3 <= 100 条件为真,返回True,执行循环中的代码块
直接print(3)
让i 自增加1 变成结果4
第三次循环结束 ,回到22 循环判断的条件中

判断4 <= 100 条件为真,返回True,执行循环中的代码块
直接print(4)
让i 自增加1 变成结果5
第四次循环结束 ,回到22 循环判断的条件中

依次类推.. 直到什么时候结束?
当 i = 101 的时候

1 <= 101 条件不成立,返回False ,不执行代码块,直接循环终止;
"""
# 计算1~100的累加和?
i = 1
total = 0
while i <=100:
	total +=i
	i+=1
print(total)
"""
i =1 
total = 0 + 1
i+=1 => i = 2
第一次循环结束...

i = 2
total = 0 + 1 + 2
i+=1 => i = 3
第二次循环结束...

i = 3
total = 0 + 1 + 2 + 3
i+=1 => i = 4
第三次循环结束...

.... 依次类推  ,什么时候结束?
当 i = 101
发现 101 <= 100 这个条件为假 那么循环终止
此刻total = 0+1+2+3+4+... .... + 100 = 5050
"""
# 死循环
"""
while True:
	print(1)
"""

# 方法二: 做1~100的累加和
print("<====>")
i = 1
total = 0
sign = True
while sign:
	total +=i
	i+=1
	if i ==101:
		sign = False
print(total)